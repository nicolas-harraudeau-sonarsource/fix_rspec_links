import json
import re

import click
from requests.auth import HTTPBasicAuth
from fix_rspec_links.fetch import fetch_rspecs as _fetch_rspecs
from fix_rspec_links.extract import extract_links as _extract_links
from fix_rspec_links.find import find_new_links as _find_new_links
from fix_rspec_links.fix import fix_rspecs as _fix_rspecs
from fix_rspec_links.check import check_links as _check_links, filter_failed_links
from fix_rspec_links.push import push_rspecs as _push_rspecs
from fix_rspec_links.utils import serialize_sets_as_lists

#
# Jira API when this script was implemented: 7.13.11
# https://docs.atlassian.com/software/jira/docs/api/REST/7.13.11
#

@click.group()
def cli():
    pass


def get_host(environment):
    """Return the host to connect to depending on the desired environment: "dev" or "prod"."""
    if environment == "dev":
        return "https://sonarsource-jira-test.valiantys.net/"
    elif environment == "prod":
        return "https://jira.sonarsource.com/"
    else:
        raise NotImplementedError("Production environment is not supported yet.")


@cli.command()
@click.option("-u", "--username")
@click.option("--password", prompt=True, confirmation_prompt=False,
              hide_input=True)
@click.option("-e", "--environment", default="dev")
@click.option("--start", default=0)
@click.option("--end", default=1000)
@click.option("-o", "--output", default="rspecs.json", type=click.File(mode='w'))
def fetch_rspecs(username, password, environment, start, end, output):
    """Fetch RSPECs from Jira and dump them in a file."""
    rspecs = _fetch_rspecs(get_host(environment), HTTPBasicAuth(username, password), start, end)
    output.write(json.dumps(rspecs, sort_keys=True, indent=4))


@cli.command()
@click.option("-i", "--input", default="rspecs.json", type=click.File(mode='r'))
@click.option("-o", "--output", default="original_links.json", type=click.File(mode='w'))
def extract_links(input, output):
    """Read a file created by "fetch_rspecs", extract all links in it and dump the result in a file."""
    rspecs = json.load(input)
    links = _extract_links(rspecs)
    output.write(json.dumps(links, sort_keys=True, indent=4, default=serialize_sets_as_lists))


@cli.command()
@click.option("-i", "--input", default="original_links.json", type=click.File(mode='r'))
@click.option("-o", "--output", default="checked_links.json", type=str)
@click.option("-r", "--retry", type=str, help="Regular expression matching the URIs to recheck.")
@click.option("--failed", default=True, type=bool, help="Retry only failed links")
def check_links(input, output, retry, failed):
    """Read a file created by "extract_links", check all links validity and dump the result in a file."""
    orig_links = json.load(input)
    result = {}

    # Filter links tor retry
    uri_filter = lambda uri: True
    if retry:
        with open(output, "r") as loaded_output_file:
            already_checked_links = json.load(loaded_output_file)
        result = already_checked_links
    
        retry_pattern = re.compile(retry)
        if failed:
            def uri_filter(uri):
                if uri not in already_checked_links:
                    return False
                metadata = already_checked_links[uri]
                return retry_pattern.match(uri) and (metadata["error"] or metadata["status"] != 200)
        else:
            uri_filter = lambda uri: retry_pattern.match(uri)
    uris_to_check = [uri for uri in orig_links if uri_filter(uri)]

    checked_links = _check_links(uris_to_check)

    # Reformat a bit the data
    for (orig_link, texts) in orig_links.items():
        if orig_link not in checked_links:
            continue
        (_, redirect, status_code, error) = checked_links[orig_link]
        result[orig_link] = {"texts": texts, "redirect": redirect, "status": status_code, "error": error}

    with open(output, "w") as written_output_file:
        written_output_file.write(json.dumps(result, sort_keys=True, indent=4))


@cli.command()
@click.option("-i", "--input", default="checked_links.json", type=click.File(mode='r'))
def list_failed_links(input):
    """Read the file generated by "check_links" and prints failed links."""
    links = json.load(input)
    for link, metadata in links.items():
        if metadata["status"] and metadata["status"] != 200:
            print(f"{metadata['status']} {link}")
        if metadata["error"]:
            print(f"ERROR {link} => {metadata['error']}")


@cli.command()
@click.option("-i", "--input", default="checked_links.json", type=click.File(mode='r'))
@click.option("-o", "--output", default="new_links.json", type=click.File(mode='w'))
def find_new_links(input, output):
    """Read the file created by "check_links" and find an alternative for each broken link."""
    links = json.load(input)
    new_links = _find_new_links(filter_failed_links(links))
    output.write(json.dumps(new_links, sort_keys=True, indent=4))


@cli.command()
@click.option("-l", "--links", default="new_links.json", type=click.File(mode='r'))
@click.option("-r", "--rspecs", default="rspecs.json", type=click.File(mode='r'))
@click.option("-o", "--output", default="fixed_rspecs.json", type=click.File(mode='w'))
def fix_rspecs(links, rspecs, output):
    """Read the files created by "find_new_links" and "fetch_rspecs", then write fixed rspecs to a file."""
    new_links = json.load(links)
    rspecs_to_fix = json.load(rspecs)
    fixed_rspecs = _fix_rspecs(rspecs_to_fix, new_links)
    output.write(json.dumps(fixed_rspecs, sort_keys=True, indent=4))


@cli.command()
@click.option("-i", "--input", default="fixed_rspecs.json", type=click.File(mode='r'))
def list_impacted_languages(input):
    """Read the file created by "fix_rspecs" and list the languages for which an RSPECs are fixed."""
    impacted_languages = set()
    rspecs = json.load(input)
    for rspec in rspecs:
        if "customfield_10004" not in rspec["fields"] or rspec["fields"]["customfield_10004"] is None:
            continue
        for covered_language in rspec["fields"]["customfield_10004"]:
            impacted_languages.add(covered_language["value"])
    click.echo(impacted_languages)


@cli.command()
@click.option("-i", "--input", default="fixed_rspecs.json", type=click.File(mode='r'))
@click.option("-u", "--username")
@click.option("--password", prompt=True, confirmation_prompt=False,
              hide_input=True)
@click.option("-e", "--environment", default="dev")
def push_rspecs(input, username, password, environment):
    """Read the files created by "fix_rspecs" and push the rspecs to jira."""
    rspecs = json.load(input)
    _push_rspecs(get_host(environment), HTTPBasicAuth(username, password), rspecs)
